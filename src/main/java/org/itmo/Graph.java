package org.itmo;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicIntegerArray;

class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;
    private final int threadPoolCount = 32;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    void parallelBFS(int startVertex) {
        ExecutorService exec = Executors.newFixedThreadPool(threadPoolCount);

        try {
            AtomicIntegerArray visited = new AtomicIntegerArray(V);

            visited.set(startVertex, 1);
            List<Integer> currentEdges = new ArrayList<>();
            currentEdges.add(startVertex);

            while (!currentEdges.isEmpty()) {
                List<Integer> currentEdgesStamp = currentEdges;
                int chunk = (currentEdges.size() - 1 + threadPoolCount) / threadPoolCount;

                List<List<Integer>> buckets = new ArrayList<>(threadPoolCount);
                for (int i = 0; i < threadPoolCount; i++) {
                    buckets.add(new ArrayList<>());
                }

                CountDownLatch latch = new CountDownLatch(threadPoolCount);

                for (int i = 0; i < threadPoolCount; i++) {
                    int from = i * chunk;
                    int to = Math.min(currentEdges.size(), from + chunk);
                    int bucketId = i;

                    exec.execute(() -> {
                        List<Integer> localEdges = buckets.get(bucketId);
                        for (int j = from; j < to; j++) {
                            int localEdge = currentEdgesStamp.get(j);
                            for (int k : adjList[localEdge]) {
                                if (visited.compareAndSet(k, 0, 1)) {
                                    localEdges.add(k);
                                }
                            }
                        }
                        latch.countDown();
                    });
                }

                latch.await();

                List<Integer> newCurrentEdges = new ArrayList<>();
                for (List<Integer> bucket : buckets) {
                    newCurrentEdges.addAll(bucket);
                }

                currentEdges = newCurrentEdges;
            }
        } catch (InterruptedException e) {
            System.out.println("Главный поток был прерван при наполнении локальных границ");
        } finally {
            exec.shutdown();
        }
    }

    //Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
